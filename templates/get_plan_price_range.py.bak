from flask import Flask, request, flash, url_for, redirect, render_template, jsonify
from flask_sqlalchemy import SQLAlchemy
import pymysql
#import getjson   #转换成Json格式的程序

app = Flask(__name__, static_url_path='')
app.config['SQLALCHEMY_DATABASE_URI'] = "mysql+pymysql://root:mbitadmin@localhost:3306/flask"
app.config['SECRET_KEY'] = "random string"

db = SQLAlchemy(app)

class plan_price_ranges(db.Model):
	id = db.Column('id', db.Integer, primary_key = True)
	store = db.Column(db.String(50))
	gender = db.Column(db.String(10))
	pclass = db.Column(db.String(100))
	price = db.Column(db.Integer) 
	year=db.Column(db.Integer) 
	month=db.Column(db.Integer) 
	unit = db.Column(db.Integer)

	def __init__(self, store,gender, pclass, price,year,month,unit):
		self.store = store
		self.gender = gender
		self.pclass = pclass
		self.price = price
		self.year = year
		self.month = month
		self.unit = unit
	
	def to_json(self):
		dict = self.__dict__
		if "_sa_instance_state" in dict:
			del dict["_sa_instance_state"]
		return dict

class AlchemyJsonEncoder(json.JSONEncoder):
	def default(self, obj):
	  # 判断是否是Query
	  if isinstance(obj, Query):
			# 定义一个字典数组
			fields = []
			# 定义一个字典对象
			record = {}
			# 检索结果集的行记录
			for rec in obj.all():
		    # 检索记录中的成员
		    for field in [x for x in dir(rec) if
	          # 过滤属性
	          not x.startswith('_')
	          # 过滤掉方法属性
	          and hasattr(rec.__getattribute__(x), '__call__') == False
	          # 过滤掉不需要的属性
	          and x != 'metadata']:
	        data = rec.__getattribute__(field)
	        try:
	        	record[field] = data
	        except TypeError:
	          record[field] = None
		    fields.append(record)
			# 返回字典数组
			return fields
	  # 其他类型的数据按照默认的方式序列化成JSON
	  return json.JSONEncoder.default(self, obj)
	    
plan_price_ranges1 =  plan_price_ranges.query.all()
result = []
for plan_price_range in plan_price_ranges1:
    result.append(plan_price_range.to_json())
return render_template('plan_price_range.html', plan_price_ranges2 = jsonify(result) )
